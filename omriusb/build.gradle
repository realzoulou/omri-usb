apply plugin: 'com.android.library'

// change to true if you want Address Sanitizer active in debug build
def asanEnabledInDebugBuild = false

android {
    compileSdkVersion 28
    buildToolsVersion "28.0.3"
    defaultConfig {
        minSdkVersion 16
        targetSdkVersion 28
        versionCode 2
        versionName "1.0"
		externalNativeBuild {
            cmake {
                cppFlags "-std=c++11 -frtti -fexceptions"
                arguments "-DANDROID_STL=c++_shared"
            }
        }
    }
    buildTypes {
        release {
            jniDebuggable false
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            externalNativeBuild {
                cmake {
                    cppFlags -= "-DDEBUGOUTPUT"
                }
            }
        }
        debug {
            jniDebuggable true
            externalNativeBuild {
                cmake {
                    cppFlags += "-DDEBUGOUTPUT"
                    // address sanitizer arguments for cmake
                    if (asanEnabledInDebugBuild) {
                        arguments "-DANDROID_ARM_MODE=arm", "-DANDROID_STL=c++_shared"
                        arguments += "-DIRTDAB_ADDRESS_SANITIZER=yes"
                    }
                }
            }
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

	externalNativeBuild {
        cmake {
            path "CMakeLists.txt"
        }
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
//    implementation 'de.irt.hradio:dabaudiodecoderplugininterface:1.0.0'
    implementation project(path: ':dabaudiodecoderplugininterface')
    implementation 'com.google.android.exoplayer:exoplayer-core:2.7.3'

    implementation 'eu.hradio.core:radiodns:1.1.2'
    implementation 'eu.hradio.core:platformsearch:1.0.3'
}

// Copy libclang_rt.asan-*.so files from NDK folder to jniLibs folder
// currently on arm64 is supported by following lines
task copyNativeAsanLibs(type: Copy) {
    if (asanEnabledInDebugBuild) {
        def ndkDir = project.android.ndkDirectory.absolutePath
        if (org.gradle.internal.os.OperatingSystem.current().isWindows()) {
            from(new File(ndkDir, 'toolchains/llvm/prebuilt/windows-x86_64/lib64/clang/9.0.8/lib/linux'))
                    { include 'libclang_rt.asan-aarch64-android.so' }
            into new File(project(':omriusb').projectDir, '/src/main/jniLibs/arm64-v8a')
        } else if (org.gradle.internal.os.OperatingSystem.current().isLinux()) {
            from(new File(ndkDir, 'toolchains/llvm/prebuilt/linux-x86_64/lib64/clang/9.0.8/lib/linux'))
                    { include 'libclang_rt.asan-aarch64-android.so' }
            into new File(project(':omriusb').projectDir, '/src/main/jniLibs/arm64-v8a')
        } else {
            // bad luck
        }
    }
}
task cleanNativeAsanLibs() {
    doLast {
        delete(project(':omriusb').projectDir.absolutePath + '/src/main/jniLibs/arm64-v8a/libclang_rt.asan-aarch64-android.so')
    }
}
// Whenever the code is compiled, also copy the native libs to the build folder
tasks.withType(JavaCompile) { compileTask -> compileTask.dependsOn copyNativeAsanLibs }
// On "gradle clean" also reverse the copying of the native libraries
clean.dependsOn cleanNativeAsanLibs


